#!/bin/bash

# if [ "$GETH_OUTDIR" != "" ]; then
#     outdir="out/"
# else
#     outdir=$0
# fi

current_dir=$(pwd)
datadir=".ethereum_testserver_data"
constructor_args_script="get_constructor_args.py"
save_json_of_results="save_json_of_results.py"
find_any_address_constructor_args="find_any_address_constructor_args.py"
requried_arguments_offset=2
tool_dir="tools"
password_fn="password.txt"
system_platform=$(uname)
outdir=$1
gen_js_dir="$outdir/auto_generated_js"

mkdir -p $outdir
mkdir -p $gen_js_dir

# If env. var undef, store to "out", otherwise "t/out".
# if [ "$GETH_TEST" == "TEST" ]; then
#     outdir="t/$outdir"
# fi

# IPC path is a hardcoded value in Ethereum Wallet GUI, cf.
# http://ethereum.stackexchange.com/questions/4418/how-to-change-to-private-network-in-etherum-wallet/4429
if [[ $system_platform == "Linux" ]]; then
    ipcpath="$HOME/.ethereum/geth.ipc"
elif [[ $system_platform == "Darwin" ]]; then
    ipcpath="$HOME/Library/Ethereum/geth.ipc"
else
    echo "The system system platform is not Linux or Darwin, we only support one of these"
    exit 1
fi

# Check that source code file and password are provided

if [ $# -lt $requried_arguments_offset ]; then
    echo "Usage: compile <outdir> <source file> [arg0 of constructor] [arg1 of constructor] ..."
    exit 1
fi

# Check that source code file exists
if [ ! -f $2 ]; then
    echo "Source file \"$2\" not found."
    exit 1
fi

file_ext="${2##*.}"
bn="$(basename $2 .$file_ext)"

# Pre-compile step
MY_ADDRESS=$(cat my_address)
# Fish out the addresses from contracts.json file
EUR_TOKEN_ADDRESS=$(echo -n $(python $find_any_address_constructor_args $outdir '_address_Tmc4_EUR'))
USD_TOKEN_ADDRESS=$(echo -n $(python $find_any_address_constructor_args $outdir '_address_Tmc4_USD'))
DKK_TOKEN_ADDRESS=$(echo -n $(python $find_any_address_constructor_args $outdir '_address_Tmc4_DKK'))

# Make a copy of the source file
cp $2 "$2_bak"

# Replace with the values we got from contracts.json
sed -i "" -e "s/_my_address/$MY_ADDRESS/g" $2
sed -i "" -e "s/_address_Tmc4_DKK/$DKK_TOKEN_ADDRESS/g" $2
sed -i "" -e "s/_address_Tmc4_USD/$USD_TOKEN_ADDRESS/g" $2
sed -i "" -e "s/_address_Tmc4_EUR/$EUR_TOKEN_ADDRESS/g" $2

if [[ $file_ext == "sol" ]]; then
    # Check that the first letter of the file name is a capitalized letter
    if [[ "${bn:0:1}" =~ [a-z0-9] ]]; then
        echo "Invalid file name, first letter must be capitalized!"
        exit 1
    fi
    solc -o $outdir --abi --bin --overwrite $2 # Compiles Solidity to EVM
elif [[ $file_ext == "bahr" ]]; then
    # DEVFIX: we assume that Heather bin is located in the following path.
    ../Heather/src/main -o $outdir $2
else
    echo "Only supports .bahr or .sol files"
    exit 1
fi

# Find filenames
abi_def_fn="$outdir/$bn.abi"
abi_source="$(cat $abi_def_fn)"
bin_fn="$outdir/$bn.bin"
bin="0x$(cat $bin_fn)"

# Count provided arguments
expected_amount_of_args=$(python "$constructor_args_script" $abi_def_fn)
amount_of_constructor_args=$(expr $# - $requried_arguments_offset)

if [[ $expected_amount_of_args -ne $amount_of_constructor_args ]]; then
    echo "Wrong number of arguments given for the constructor: Expected $expected_amount_of_args but got $amount_of_constructor_args"
    echo "You may also want to check that the constructor has the same name as the contract"
    exit 1
fi

# Preparing argument string for constructor
constructor_args=""
args=("$@")
amount_of_args=$#
if [[ $amount_of_args -gt $requried_arguments_offset ]]; then
    # Iterate over constructor arguments.
    for i in $(seq $(expr $requried_arguments_offset + 1) $amount_of_args)
    do
        if [[ "${!i}" == "_address_my" ]]; then
            constructor_args+="'$(cat my_address)', "
        elif [[ "${!i}" =~ ^_address_.* ]]; then
            constructor_args+="'$(python "$find_any_address_constructor_args" $outdir ${!i})', "
        else
            constructor_args+="${!i}, "
        fi
    done
fi

# Define javascript to invoke constructor
filter_out_id="Javascript message:"
js_code="var contractObject = web3.eth.contract($abi_source); "
js_code+="var gas = web3.eth.estimateGas({data: '$bin' })*5; " # This is the ultimate hack, but we don't know the price it should be.
js_code+=$(cat <<EOF
var submittedContract = contractObject.new($constructor_args {from:web3.eth.accounts[0], data:'$bin', gas: gas}, function(e, contract){
    if(!e){
        if (!contract.address){
            console.log('$filter_out_id Contract transaction sent: TransactionHash: ' + contract.transactionHash + ' waiting to be mined ...');
        }
    }
});
var t=web3.eth.getTransaction(submittedContract.transactionHash);
while( t.blockNumber === null  ){
    t=web3.eth.getTransaction(submittedContract.transactionHash);
}
console.log('$filter_out_id Transaction included in block ' + t.blockNumber );
console.log('$filter_out_id Gas provided: ' + gas);
var rcpt = eth.getTransactionReceipt(submittedContract.transactionHash);
if (rcpt.contractAddress && web3.eth.getCode(rcpt.contractAddress) != '0x'){
    console.log('$filter_out_id Contract created on address:');
    console.log(rcpt.contractAddress);
    console.log('$filter_out_id Gas used: ' + rcpt.gasUsed);
} else {
    console.log('Contract address not found. Something went wrong. Perhaps too little gas.')
}
EOF
        )
js_fn="$gen_js_dir/javascript_$bn"
echo $js_code > $js_fn

# Run javascript and store contract address
password=$(cat $password_fn)
address_fn="$outdir/$bn.address"
address=$(geth --exec "personal.unlockAccount(web3.eth.accounts[0], '$password'); loadScript('$js_fn');" attach $ipcpath | tee /dev/stderr | grep -v true | grep -v "$filter_out_id")

# The results of constructor args and address will be written to the file out/contract.txt
python "$save_json_of_results" $outdir $bn $constructor_args $address

mv "$2_bak" $2